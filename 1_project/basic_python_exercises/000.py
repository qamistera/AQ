def geet_user():
    name=input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ")
    print(f"–ü—Ä–∏–≤–µ—Ç,{name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä Python!")

# geet_user()

def calculate_sum():
    a = int(input("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: "))
    b = int(input("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ: "))
    summa = a + b
    print(f"–°—É–º–º–∞ —á–∏—Å–µ–ª: ", summa)

# calculate_sum()

def calculate_sum(a, b):
    summa = a + b
    print(f"–°—É–º–º–∞ —á–∏—Å–µ–ª: {summa}")

# x = int(input("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: "))
# y = int(input("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ: "))

# calculate_sum(x, y)



def age(ages):

    year_now = 2025
    ages_calc = year_now-ages
    print(f'–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {ages_calc}')
    if ages_calc < 18:
        print("–í—ã –µ—â–µ –º–æ–ª–æ–¥—ã, —É—á–µ–±–∞ - –≤–∞—à –ø—É—Ç—å!")
    elif 18 <= ages_calc < 65:
        print("–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞!")
    else:
        print("–ü–æ—Ä–∞ –Ω–∞ –æ—Ç–¥—ã—Ö")

# ages=int(input("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è: "))
#
# age(ages)



def calculator():

    def add(a, b):
        return a + b
    def subtract(a, b):
        return a - b
    def multiply(a, b):
        return a * b
    def divide(a, b):
        if b == 0:
            return "–û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å"
        return a / b

    try:
        a = float(input("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: "))
        b = float(input("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ: "))
    except ValueError:
        return "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —á–∏—Å–ª–∞."

    operation = input('–í–≤–µ–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é ( [+], [-], [*], [/] ): ')

    if operation == "+":
        result = add(a, b)
    elif operation == "-":
        result = subtract(a, b)
    elif operation == "*":
        result = multiply(a, b)
    elif operation == "/":
        result = divide(a, b)
    else:
        return "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è."

    return f'–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}'

#print(calculator())





def chexk_grade(score):
    if 90<=score<= 100:
        return "–û—Ç–ª–∏—á–Ω–æ"
    elif 75<=score<=89:
        return "–•–æ—Ä–æ—à–æ"
    elif 50<=score<=75:
        return "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
    else:
        return "–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"

print(chexk_grade(75))


def is_even(number):
    return "—á–µ—Ç–Ω–æ–µ" if number % 2 == 0 else "–Ω–µ—á–µ—Ç–Ω–æ–µ"

a=7
b=is_even(a)

print(f"–ß–∏—Å–ª–æ {a} —è–≤–ª—è–µ—Ç—Å—è {b}.")



def find_max(a, b):
    if a>b:
        return a
    elif a<b:
        return b
    else:
        return"—á–∏—Å–ª–∞ —Ä–∞–≤–Ω—ã"

p=20
v=20
z=find_max(p, v)

print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑ —á–∏—Å–µ–ª {p} –∏ {v} : {z}")




def check_number(number):
    if number > 0:
        if number % 2==0:
            return f"–ß–∏—Å–ª–æ {number} –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∏ —á–µ—Ç–Ω–æ–µ"
        else:
            return f"–ß–∏—Å–ª–æ {number} –Ω–µ—á–µ—Ç–Ω–æ–µ"
    else:
        return f"–ß–∏—Å–ª–æ {number} –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ"

print(check_number(8))
print(check_number(-5))
print(check_number(7))



def check_string_length(string, length):
    if len(string) > length:
        return "–î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è"
    else:
        return "–°—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è"

print(check_string_length("Python", 5))



def sum_numbers(n):
    total = 0           # 1. –ú—ã —Å–æ–∑–¥–∞—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é total –∏ –∫–ª–∞–¥—ë–º –≤ –Ω–µ—ë 0.
                        #    –û–Ω–∞ –±—É–¥–µ—Ç –∫–æ–ø–∏—Ç—å —Å—É–º–º—É –≤—Å–µ—Ö —á–∏—Å–µ–ª.

    for i in range(1, n + 1):  # 2. –ú—ã –∑–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª for –æ—Ç 1 –¥–æ n –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.
        total += i      # api_testing_items_crud. –ù–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ i –∫ total.

    return total

chislo = 5
suma = sum_numbers(chislo)
print(suma)




def find_min0(number):     # –û–±—ä—è–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
    minimal = number[0]   # –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ ‚Äî –ø–µ—Ä–≤—ã–π –∏–Ω–¥–µ–∫—Å —Å–ø–∏—Å–∫–∞
    for i in number:      # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞
        if i < minimal:   # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –º–∏–Ω–∏–º—É–º–∞
            minimal = i   # –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–Ω–∏–º—É–º
    return minimal        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç

print(find_min0([3, 2, 4, 1, 5]))   # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–æ–∂–∏–¥–∞–µ—Ç—Å—è: 1)





def find_min(numbers):
    min_number = numbers[0]   # 1. –ë–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –∫–∞–∫ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –º–∏–Ω–∏–º—É–º

    for num in numbers:       # 2. –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —á–∏—Å–ª–∞ –ø–æ –æ—á–µ—Ä–µ–¥–∏
        if num < min_number:  # api_testing_items_crud. –ü—Ä–æ–≤–µ—Ä—è–µ–º: —Ç–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞?
            min_number = num  # 4. –ï—Å–ª–∏ –¥–∞ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –º–∏–Ω–∏–º—É–º

    return min_number          # 5. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –º–∏–Ω–∏–º—É–º

# # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
numbers = [3, 1, 4, 1, 5]
result = find_min(numbers)
print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤ —Å–ø–∏—Å–∫–µ {numbers}: {result}")





def count_vowels(string):
    vowels = "aeiouAEIOU"
    count = 0

    for i in string:
        if i in vowels:
            count +=1
    return count

w="Hello World"
rezalt=count_vowels(w)
print(count_vowels("Hello World"))
print(count_vowels(w))
print(rezalt)

def count_vowels(string):
    vowels = "aeiouAEIOU"   # üéØ –í—Å–µ –≥–ª–∞—Å–Ω—ã–µ –±—É–∫–≤—ã, –∏ –º–∞–ª–µ–Ω—å–∫–∏–µ, –∏ –±–æ–ª—å—à–∏–µ
    count = 0               # üõ† –°—á—ë—Ç—á–∏–∫ –≥–ª–∞—Å–Ω—ã—Ö, —Å—Ç–∞—Ä—Ç —Å 0

    for char in string:     # üîÑ –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –≤ —Å—Ç—Ä–æ–∫–µ
        if char in vowels:  # ‚ùì –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª ‚Äî –≥–ª–∞—Å–Ω–∞—è
            count += 1      # ‚ûï –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –Ω–∞ 1

    return count            # üéØ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞—Å–Ω—ã—Ö

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
result = count_vowels("Hello World")
print(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞—Å–Ω—ã—Ö –≤ —Å—Ç—Ä–æ–∫–µ "Hello World": {result}')





def print_diamond(rows):

    for i in range(1,rows+1):
        print("* " * i)

    for i in range(rows-1, 0, -1):
        print("* " * i)

print_diamond(5)




def countdown():
    for i in range(10, 0, -1):  # üîÑ –ò–¥—ë–º –æ—Ç 10 –¥–æ 1, —à–∞–≥ -1
        print(i)                # üñ® –ü–µ—á–∞—Ç–∞–µ–º –∫–∞–∂–¥–æ–µ —á–∏—Å–ª–æ
    print("–°—Ç–∞—Ä—Ç!")             # üñ® –ü–æ—Å–ª–µ —Ü–∏–∫–ª–∞ –ø–µ—á–∞—Ç–∞–µ–º "–°—Ç–∞—Ä—Ç!"

# –ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞:
countdown()





def countdown():
    i = 10              # üéØ –°—Ç–∞—Ä—Ç—É–µ–º —Å 10
    while i > 0:        # üîÑ –ü–æ–∫–∞ i –±–æ–ª—å—à–µ 0
        print(i)        # üñ® –ü–µ—á–∞—Ç–∞–µ–º i
        i -= 1          # ‚ûñ –£–º–µ–Ω—å—à–∞–µ–º i –Ω–∞ 1
    print("–°—Ç–∞—Ä—Ç!")     # üñ® –ü–æ—Å–ª–µ —Ü–∏–∫–ª–∞ –ø–µ—á–∞—Ç–∞–µ–º "–°—Ç–∞—Ä—Ç!"

# –ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞:
countdown()


def countdown_w():
    i=10
    while i>0:
        i-=1
        print(i)
    print("Start !")

countdown_w()



# –ó–∞–¥–∞—á–∞ 1: –ê–Ω–∞–≥—Ä–∞–º–º–∞
# –û–ø–∏—Å–∞–Ω–∏–µ:
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_anagram(s1, s2), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ –∞–Ω–∞–≥—Ä–∞–º–º–∞–º–∏ (–ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞).
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: —Å—Ç—Ä–æ–∫–∏ s1 –∏ s2.
# –ò–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä —Å–∏–º–≤–æ–ª–æ–≤.
# –í–µ—Ä–Ω–∏—Ç–µ True, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∏ —è–≤–ª—è—é—Ç—Å—è –∞–Ω–∞–≥—Ä–∞–º–º–∞–º–∏, –∏–Ω–∞—á–µ ‚Äî False.
# –ü—Ä–∏–º–µ—Ä:
# print(is_anagram("listen", "silent"))  # True
# print(is_anagram("hello", "world"))    # False

def is_anagram(s1, s2):
    s1 = s1.lower()
    s2 = s2.lower()

    # –†–∞–∑–Ω–∞—è –¥–ª–∏–Ω–∞ ‚Äî —Å—Ä–∞–∑—É –Ω–µ –∞–Ω–∞–≥—Ä–∞–º–º–∞
    if len(s1) != len(s2):
        return False

    # –ë–µ—Ä—ë–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±—É–∫–≤—ã –∏–∑ –æ–±–µ–∏—Ö —Å—Ç—Ä–æ–∫
    for char in set(s1 + s2):
        if s1.count(char) != s2.count(char):
            return False

    return True

# 2 –≤–∞—Ä–∏–∞–Ω—Ç
def is_anagram_2(s1, s2):
    s1 = s1.lower()
    s2 = s2.lower()

    if len(s1) != len(s2):
        return False

    return {char: s1.count(char) for char in set(s1)} == \
           {char: s2.count(char) for char in set(s2)}

# –ó–∞–¥–∞—á–∞ 2: –ü–∞–ª–∏–Ω–¥—Ä–æ–º
# –û–ø–∏—Å–∞–Ω–∏–µ:
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_palindrome(s), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º (—á–∏—Ç–∞–µ—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ –∏ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ). –ò–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –ø—Ä–æ–±–µ–ª—ã, –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä.
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç: —Å—Ç—Ä–æ–∫—É s.
# –í–µ—Ä–Ω–∏—Ç–µ True, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º, –∏–Ω–∞—á–µ ‚Äî False.
# –ü—Ä–∏–º–µ—Ä:
# is_palindrome("A man, a plan, a canal: Panama")  # True
# is_palindrome("racecar")                         # True
# is_palindrome("hello")                           # False

def is_palindrome(s):
    # –ü—Ä–∏–≤–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    s = s.lower()

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è)
    cleaned = ""
    for char in s:
        if char.isalnum():  # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
            cleaned += char

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –µ—ë —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ–π –∫–æ–ø–∏–µ–π (–æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫)
    return cleaned == cleaned[::-1]


print(is_palindrome("A man, a plan, a canal: Panama"))  #  True
print(is_palindrome("racecar"))                         #  True
print(is_palindrome("hello"))                           #  False


def is_palindrome2(s):
    cleaned = ''.join(char for char in s.lower() if char.isalnum())
    return cleaned == cleaned[::-1]





def is_palindrome(s):
    s = ''.join(filter(str.isalnum, s.lower()))
    return s == s[::-1]


# –ó–∞–¥–∞—á–∞ api_testing_items_crud: –°–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
# –û–ø–∏—Å–∞–Ω–∏–µ:
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é longest_word(s), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –≤ —Å—Ç—Ä–æ–∫–µ.
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç: —Å—Ç—Ä–æ–∫—É s.
# –í–µ—Ä–Ω–∏—Ç–µ —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ.
# –ü—Ä–∏–º–µ—Ä:
# longest_word("In the middle of a vast desert, an extraordinary adventure awaits")  # "extraordinary‚Äù

def longest_word(s):
    words = s.split()
    longest = ""
    for word in words:
        if len(word) > len(longest):
            longest = word
    return longest

p="In the middle of a vast desert, an extraordinary adventure awaits"
print(longest_word(p))


# –ó–∞–¥–∞—á–∞ 4: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
# –û–ø–∏—Å–∞–Ω–∏–µ:
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é format_phone_number(digits), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ 10 —Ü–∏—Ñ—Ä –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë –≤ —Ñ–æ—Ä–º–∞—Ç–µ (XXX) XXX-XXXX.
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç: —Å—Ç—Ä–æ–∫—É digits.
# –í–µ—Ä–Ω–∏—Ç–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
# –ü—Ä–∏–º–µ—Ä:
# print(format_phone_number("1234567890"))  # "(123) 456-7890‚Äù

def format_phone_number(digits):
    if len(digits) != 10 or not digits.isdigit():
        return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞"
    return f"({digits[0:3]}) {digits[3:6]}-{digits[6:10]}"


print(format_phone_number("1234567890"))



# –ó–∞–¥–∞—á–∞ 5: –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
# –û–ø–∏—Å–∞–Ω–∏–µ:
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é remove_duplicates(s), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞.
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç: —Å—Ç—Ä–æ–∫—É s.
# –í–µ—Ä–Ω–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –±–µ–∑ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤.
# –ü—Ä–∏–º–µ—Ä:
# remove_duplicates("programming")  # "progamin‚Äù

def remove_duplicates(s):
    result=""
    for char in s:
        if char  not in result:
            result += char
    return result


# –ó–∞–¥–∞—á–∞ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_unique(s), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∑–∞–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤).
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç: —Å—Ç—Ä–æ–∫—É s.
# –í–µ—Ä–Ω–∏—Ç–µ True, –µ—Å–ª–∏ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã, –∏–Ω–∞—á–µ ‚Äî False.
# –ü—Ä–∏–º–µ—Ä:
# is_unique("abcdef")  # True
# is_unique("hello")  # False

def is_unique(s):
    return len(s)==len(set(s))



# –°–ø–∏—Å–∫–∏ - –∑–∞–¥–∞—á–∏
# –ó–∞–¥–∞—á–∞ 1: –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
# –û–ø–∏—Å–∞–Ω–∏–µ:
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é remove_duplicates(lst), –∫–æ—Ç–æ—Ä–∞—è —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç: —Å–ø–∏—Å–æ–∫ lst.
# –í–µ—Ä–Ω–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
# –ü—Ä–∏–º–µ—Ä:
# print(remove_duplicates([1, 2, 2, api_testing_items_crud, 4, 4]))  # [1, 2, api_testing_items_crud, 4]


def remove_duplicates(lst):
    list1=[]
    for i in lst:
        if i not in list1:
            list1.append(i)
    return list1


# –ó–∞–¥–∞—á–∞ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤
# –û–ø–∏—Å–∞–Ω–∏–µ:
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é generate_squares(n), –∫–æ—Ç–æ—Ä–∞—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ n.
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç: —á–∏—Å–ª–æ n.
# –í–µ—Ä–Ω–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤.
# –ü—Ä–∏–º–µ—Ä:
# print(generate_squares(5))  # [1, 4, 9, 16, 25]

def generate_squares(n):
    return [x**2 for x in range(1,n+1)]

def generate_squares1(n):
    l=[x**2 for x in range(1,n+1)]
    return l

def generate_squares2(n):
    result = []
    for i in range(1, n + 1):
        result.append(i ** 2)
    return result

print(generate_squares2(5))


# –ó–∞–¥–∞—á–∞ api_testing_items_crud: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–≤—É—Ö —Å–ø–∏—Å–∫–æ–≤
# –û–ø–∏—Å–∞–Ω–∏–µ:
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é merge_lists(list1, list2), –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–≤–∞ —Å–ø–∏—Å–∫–∞, —É–¥–∞–ª—è—è –¥—É–±–ª–∏–∫–∞—Ç—ã.
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: —Å–ø–∏—Å–∫–∏ list1 –∏ list2.
# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ (set) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.
# –í–µ—Ä–Ω–∏—Ç–µ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.
# –ü—Ä–∏–º–µ—Ä:
# print(merge_lists([1, 2, api_testing_items_crud], [api_testing_items_crud, 4, 5]))  # [1, 2, api_testing_items_crud, 4, 5]


def merge_lists0(list1, list2):
    list1 = list1.copy()          # –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª

    list1.extend(list2)           # –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏
    unique = list(set(list1))     # —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã ‚Üí —Å–ø–∏—Å–æ–∫
    unique.sort()                 # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞ –º–µ—Å—Ç–µ .sort()
    return unique                 # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç


def merge_lists(list1, list2):
    list1.extend(list2)
    return sorted(set(list1))

def marge_lists(list1, list2):
    a= list1.copy()
    a.extetnd(list2)
    return sorted(set(a))



# –ó–∞–¥–∞—á–∞ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
# –û–ø–∏—Å–∞–Ω–∏–µ:
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_sorted(lst), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é.
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç: —Å–ø–∏—Å–æ–∫ lst.
# –í–µ—Ä–Ω–∏—Ç–µ True, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω, –∏–Ω–∞—á–µ ‚Äî False.
# –ü—Ä–∏–º–µ—Ä:
# print(is_sorted([1, 2, api_testing_items_crud, 4, 5]))  # True
# print(is_sorted([1, api_testing_items_crud, 2, 4, 5]))  # False


def is_sorted(lst):
    if lst == sorted(lst):
        return True

def is_sorted2(lst):
    for i in range(len(lst)-1):
        if lst[i]> lst[i+1]:
            return False
    return True

print(is_sorted([1, 2, 3, 5]))
print(is_sorted2([1, 2, 5, 3]))

# –ó–∞–¥–∞—á–∞ 5: –°–ª–∏—è–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤
# –û–ø–∏—Å–∞–Ω–∏–µ:
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é merge_lists(list1, list2), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ —Å–ø–∏—Å–∫–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫, –≥–¥–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã –ø—É—Ç—ë–º —Å–ª–æ–∂–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –æ–±–æ–∏—Ö —Å–ø–∏—Å–∫–æ–≤.
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: —Å–ø–∏—Å–∫–∏ list1 –∏ list2.
# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞.
# –í–µ—Ä–Ω–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–ª–æ–∂–µ–Ω–∏—è.
# –ü—Ä–∏–º–µ—Ä:
# print(merge_lists([1, 2, api_testing_items_crud], [4, 5, 6]))  # [5, 7, 9]


def merge_lists0(list1, list2):
    return [a + b for a, b in zip(list1, list2)]

# zip(list1, list2) ‚Äî —Å–æ–µ–¥–∏–Ω—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ø–∞—Ä–Ω–æ:
# [1, 2, api_testing_items_crud] –∏ [4, 5, 6] ‚Üí [(1, 4), (2, 5), (api_testing_items_crud, 6)]
# a + b ‚Äî —Å–∫–ª–∞–¥—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã


def merge_lists00(list1, list2):
    result = []
    for a, b in zip(list1, list2):
        result.append(a + b)
    return result


def merge_lists1(list1, list2):
    if list1 != list2:
        raise ValueError("–°–ø–∏—Å–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã")

    return [list1[i]+list2[i] for i in range(len(list1))]


def merge_lists2(list1, list2):
    min_len = min(len(list1), len(list2))
    return [list1[i] + list2[i] for i in range(min_len)]

# min(len(list1), len(list2)) ‚Äî –±–µ—Ä—ë–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
# range(min_len) ‚Äî –Ω–µ –≤—ã–π–¥–µ–º –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
# [list1[i] + list2[i] for i in ...] ‚Äî —Å–∫–ª–∞–¥—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –µ—Å—Ç—å




# –°–ª–æ–≤–∞—Ä–∏ - –∑–∞–¥–∞—á–∏
# –ó–∞–¥–∞—á–∞ 1: –ß–∞—Å—Ç–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–æ–∫–∏
# –û–ø–∏—Å–∞–Ω–∏–µ:
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é char_frequency(s), –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞—ë—Ç —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á–∞–º–∏ —è–≤–ª—è—é—Ç—Å—è —Å–∏–º–≤–æ–ª—ã —Å—Ç—Ä–æ–∫–∏, –∞ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑, –∫–æ–≥–¥–∞ –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–µ.
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç: —Å—Ç—Ä–æ–∫—É s.
# –í–µ—Ä–Ω–∏—Ç–µ —Å–ª–æ–≤–∞—Ä—å —Å —á–∞—Å—Ç–æ—Ç–∞–º–∏ —Å–∏–º–≤–æ–ª–æ–≤.
# –ü—Ä–∏–º–µ—Ä:
# char_frequency("hello")  # {'h': 1, 'e': 1, 'l': 2, 'o': 1}


def char_frequency(s):
    freq = {}
    for char in s:
        if char in freq:
            freq[char] += 1  # {"–ö–ª—é—á":–∑–Ω–∞—á–µ–Ω–∏–µ}
        else:
            freq[char] = 1   # {"–ö–ª—é—á":–∑–Ω–∞—á–µ–Ω–∏–µ}
    return freq


# –ó–∞–¥–∞—á–∞ 2: –°–ª–∏—è–Ω–∏–µ –¥–≤—É—Ö —Å–ª–æ–≤–∞—Ä–µ–π
# –û–ø–∏—Å–∞–Ω–∏–µ:
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é merge_dicts(dict1, dict2), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ —Å–ª–æ–≤–∞—Ä—è –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏—Ö –≤ –æ–¥–∏–Ω. –ï—Å–ª–∏ –≤ –æ–±–æ–∏—Ö —Å–ª–æ–≤–∞—Ä—è—Ö –µ—Å—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–ª—é—á–∏, —Å—É–º–º–∏—Ä—É–π—Ç–µ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è (–∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞).
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: —Å–ª–æ–≤–∞—Ä–∏ dict1 –∏ dict2.
# –ï—Å–ª–∏ –∫–ª—é—á –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ–±–æ–∏—Ö —Å–ª–æ–≤–∞—Ä—è—Ö, —Å–ª–æ–∂–∏—Ç–µ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è.
# –í–µ—Ä–Ω–∏—Ç–µ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å.
# –ü—Ä–∏–º–µ—Ä:
# dict1 = {"a": 1, "b": 2}
# dict2 = {"b": api_testing_items_crud, "c": 4}
# print(merge_dicts(dict1, dict2))  # {"a": 1, "b": 5, "c": 4}

def merge_dicts(dict1, dict2):
    result = dict1.copy()  # —Å–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è

    for key, value in dict2.items():
        if key in result:
            result[key] += value  # –µ—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å ‚Äî —Å—É–º–º–∏—Ä—É–µ–º
        else:
            result[key] = value   # –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
    return result


def merge_dicts0(dict1, dict2):

    for key, value in dict2.items():
        if key in dict1:
            dict1[key]+= value
        else:
            dict1[key]=value
    return dict1


d1 = {"a": 1, "b": 2}
d2 = {"b": 3, "c": 4}
print(merge_dicts0(d1, d2))


def merge_dicts2(dict1, dict2):
    all_keys = set(dict1) | set(dict2)  # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∫–ª—é—á–∏ –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤–∞—Ä–µ–π
    return {key: dict1.get(key, 0) + dict2.get(key, 0) for key in all_keys}



# –ó–∞–¥–∞—á–∞ api_testing_items_crud: –û–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –≤ –¥–≤–∞ —Å–ø–∏—Å–∫–∞
# –û–ø–∏—Å–∞–Ω–∏–µ:
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é dict_to_lists(my_dict), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–≤–∞ —Å–ø–∏—Å–∫–∞: –æ–¥–∏–Ω —Å –∫–ª—é—á–∞–º–∏ –∏ –¥—Ä—É–≥–æ–π —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç: —Å–ª–æ–≤–∞—Ä—å my_dict.
# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥—ã .keys() –∏ .values() –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–π –∏ –∑–Ω–∞—á–µ–Ω–∏–π.
# –í–µ—Ä–Ω–∏—Ç–µ –∫–æ—Ä—Ç–µ–∂, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–≤–∞ —Å–ø–∏—Å–∫–∞: —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –∏ —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π.
# –ü—Ä–∏–º–µ—Ä:
# my_dict = {"a": 1, "b": 2, "c": api_testing_items_crud}
# print(dict_to_lists(my_dict))  # (["a", "b", "c"], [1, 2, api_testing_items_crud])


def dict_to_lists(my_dict):
    key=list(my_dict.keys())
    value=list(my_dict.values())
    return (key, value)

my_dict = {"a": 1, "b": 2, "c": 3}
print(dict_to_lists(my_dict))


# –ó–∞–¥–∞—á–∞ 4: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–∏–º–≤–æ–ª—É
# –û–ø–∏—Å–∞–Ω–∏–µ:
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é group_by_first_letter(strings), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∏—Ö –≤ —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á–∞–º–∏ —è–≤–ª—è—é—Ç—Å—è –ø–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã —Å—Ç—Ä–æ–∫, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º ‚Äî —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞.
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç: —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ strings.
# –í–µ—Ä–Ω–∏—Ç–µ —Å–ª–æ–≤–∞—Ä—å —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π.
# –ü—Ä–∏–º–µ—Ä:
# strings = ["apple", "apricot", "banana", "blueberry", "cherry"]
# print(group_by_first_letter(strings))
# # {"a": ["apple", "apricot"], "b": ["banana", "blueberry"], "c": ["cherry"]}


def group_by_first_letter(strings):
    result = {}  # —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏

    for word in strings:  # –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –≤ —Å–ø–∏—Å–∫–µ
        first = word[0]  # –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É —Å–ª–æ–≤–∞

        if first not in result:
            result[first] = []  # –µ—Å–ª–∏ —Ç–∞–∫–æ–π –±—É–∫–≤—ã –µ—â—ë –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ ‚Äî —Å–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫

        result[first].append(word)  # –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É

    return result  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–æ—Ç–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –≥—Ä—É–ø–ø



def group_by_f_letter(strings):
    slov={}
    for word in strings:
        ferst_l=word[0]
        if ferst_l not in slov:
            slov[ferst_l]=[]
        slov[ferst_l].append(word)
    return slov

sss = ["apple", "apricot", "banana", "blueberry", "cherry"]

print(group_by_f_letter(sss))


# –ó–∞–¥–∞—á–∞ 5: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–¥—Å–ª–æ–≤–∞—Ä—è
# –û–ø–∏—Å–∞–Ω–∏–µ:
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é extract_subdict(my_dict, keys), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –∏ —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π. –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å, –≤–∫–ª—é—á–∞—é—â–∏–π —Ç–æ–ª—å–∫–æ —Ç–µ –ø–∞—Ä—ã, –∫–ª—é—á–∏ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ.
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: —Å–ª–æ–≤–∞—Ä—å my_dict –∏ —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π keys.
# –í–µ—Ä–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å.
# –ü—Ä–∏–º–µ—Ä:
# my_dict = {"a": 1, "b": 2, "c": api_testing_items_crud, "d": 4}
# keys = ["a", "c"]
# print(extract_subdict(my_dict, keys))  # {"a": 1, "c": api_testing_items_crud}

def extract_subdict(my_dict, keys):
    return {k: my_dict[k] for k in keys if k in my_dict}


d1 = {"a": 1, "b": 2, "c": 3, "d": 4}
k1 = ["a", "c"]
print(extract_subdict(d1, k1))


# –ó–∞–¥–∞—á–∞ 1: –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞
# –û–ø–∏—Å–∞–Ω–∏–µ:
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_unique_elements(lst), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –∏–ª–∏ —Å—Ç—Ä–æ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç: —Å–ø–∏—Å–æ–∫ lst.
# –í–µ—Ä–Ω–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
# –ü—Ä–∏–º–µ—Ä:
# print(get_unique_elements([1, 2, 2, api_testing_items_crud, 4, 4, 4, 5]))  # [1, 2, api_testing_items_crud, 4, 5]

def get_unique_elements(lst):
    return list(set(lst))

a=[1, 2, 2, 3, 4, 4, 4, 5]
print(get_unique_elements(a))


# –ó–∞–¥–∞—á–∞ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤
# –û–ø–∏—Å–∞–Ω–∏–µ:
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_unique_list(lst), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã, –∏ False, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç: —Å–ø–∏—Å–æ–∫ lst.
# –í–µ—Ä–Ω–∏—Ç–µ True, –µ—Å–ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã, –∏–Ω–∞—á–µ ‚Äî False.
# –ü—Ä–∏–º–µ—Ä:
# print(is_unique_list([1, 2, api_testing_items_crud, 4]))  # True
# print(is_unique_list([1, 2, 2, api_testing_items_crud]))  # False

def is_unique_list(lst):
    return len(lst) == len(set(lst))

print(is_unique_list([1, 2, 3, 4]))
print(is_unique_list([1, 2, 2, 3]))



# –ó–∞–¥–∞—á–∞ api_testing_items_crud: –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–ª–∞—Å–Ω—ã—Ö –∏–∑ —Å—Ç—Ä–æ–∫–∏
# –û–ø–∏—Å–∞–Ω–∏–µ:
# –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_unique_vowels(s), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–±–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–ª–∞—Å–Ω—ã—Ö, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö—Å—è –≤ —Å—Ç—Ä–æ–∫–µ (–∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–µ–≥–∏—Å—Ç—Ä).
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç: —Å—Ç—Ä–æ–∫—É s.
# –ì–ª–∞—Å–Ω—ã–µ –±—É–∫–≤—ã: a, e, i, o, u.
# –ò–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä —Å–∏–º–≤–æ–ª–æ–≤.
# –í–µ—Ä–Ω–∏—Ç–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–ª–∞—Å–Ω—ã—Ö.
# –ü—Ä–∏–º–µ—Ä:
# print(get_unique_vowels("Hello World"))  # {'e', 'o'}


def get_unique_vowels(s):
    vowels = "aeiou"
    return {char.lower() for char in s if char.lower() in vowels}

print(get_unique_vowels("Hello World"))



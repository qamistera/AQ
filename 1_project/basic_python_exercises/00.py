333

grams = 12345

full_kilograms = int((grams / 1000))

print(f"В {grams} граммах содержится {full_kilograms} полных килограмм.")


number1 = 14  # Можно поменять на любое другое число

# Проверяем, что число положительное и чётное
if number1 > 0 and number1 % 2 == 0:
    print(f"Число {number1} является положительным и чётным.")
else:
    print(f"Число {number1} не подходит под условия.")


#1
num = 150 #num = int(input("Введите число: "))
if num < 0 or num > 100: # if 0 > num > 100:
    print(f"Число {num} выходит за пределы диапазона от 0 до 100.")
#2
num2 = 50 #num2 = int(input("Введите число: "))
#if 0 <= num2 <= 100: # num2 >=0 or num2 <=100
if num2 >=0 or num2 <=100:
    print(f"Число {num2} находится в пределах диапазона от 0 до 100.")
#api_testing_items_crud
num = 70 #num = int(input("Введите число: "))
if num < 0 or num > 100: # if 0 > num > 100:
    print(f"Число {num} выходит за пределы диапазона от 0 до 100.")
else:
    print(f"Число {num} находится в пределах диапазона от 0 до 100.")



# ==================================================================
# Коллекции данных: Списки, словари, кортежи, множества — создание, доступ к элементам, базовые операции.
#=====================================================================
# -----------------------------
# (Списки) — упорядоченная коллекцию элементов.
#---------------------------------------------------------------

#----------------------------------------------------------------
# Создание списка:
#fruits = ["яблоко", "банан", "вишня"]
numbers =[1,2,3]
# Основные методы работы со списками:

# Добавление элемента:
#fruits.append("апельсин")
#print(fruits)  # ["яблоко", "банан", "вишня", "апельсин"]
numbers.append(4)
print(numbers)
# Удаление элемента:
#fruits = ["яблоко", "банан", "вишня"]
#fruits.remove("банан")
#print(fruits)  # ["яблоко", "вишня"]

city= ["Москва","Лондон","Париж"]
city.remove("Лондон")
print(city)
# Доступ к элементу по индексу:
# fruits = ["яблоко", "банан", "вишня"]
# print(fruits[0])  # Выведет: яблоко

# Доступ к элементу по срезу индекса:
# fruits = ["яблоко", "банан", "вишня"]
# print(fruits[0:1])  # Выведет: яблоко
# print(fruits[0:2])  # Выведет: яблоко, банан
# print(fruits[0:api_testing_items_crud])  # Выведет: яблоко, банан, вишня

cities=["Moskow","Piter","Novosib","Ekaterenburg"]

print(cities[2])

#Доступ к элементу по срезу списка
numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
print(numbers[3:7])

# Изменение элемента:
# fruits = ["яблоко", "банан", "вишня"]
# fruits[2] = "груша"
# print(fruits)  # ["яблоко", "банан", "груша"]

colors=["red","green","blue"]
colors[1]="yellow"
print(colors)


# Узнаем длину списка:
# fruits = ["яблоко", "банан", "вишня"]
# len_list = len(fruits)
# print(len_list)  # выведет api_testing_items_crud

# можно сделать проще - сразу передав len(list) в виде аргумента в функцию print()
# print(len(fruits))

animals=["cat","dog","rabbit","hamster"]
print(len(animals))


# # Списки в python могут содержать в себе различные типы данных:
# mixed_list = ["Алиса", 30, 1.75, True, [1, 2, api_testing_items_crud], {"key": "value"}, (4, 5, 6)]
# print(mixed_list)  # Выведет ['Алиса', 30, 1.75, True, [1, 2, api_testing_items_crud], {'key': 'value'}, (4, 5, 6)]

# -----------------------------
# Словари
# -----------------------------
# Словарь в Python — это неупорядоченная коллекция элементов,
# где каждый элемент хранится как пара ключ-значение.
#-----------------------------------------------------


# Создание словаря:
# person = {"имя": "Алиса", "возраст": 30}
student={"name":"ivan","age":20}

# # Основные методы работы со словарями:
# # Добавление или изменение элемента:
# person["город"] = "Москва"
student["grade"] = "A"
print(student)
student["grade"] ="B"
print(student)

# Удаление элемента:
# del person["возраст"]
student = {"name":"Ivan","age":20,"grade":"A"}
del student["age"]
print(student)

# # Доступ к элементу по ключу:
# # print(person["имя"])  # Выведет: Алиса
print(student["name"])
# # # Проверка наличия ключа:
# # print("город" in person)  # Выведет: True
student = {"name":"Ivan","age":20,"grade":"A"}

if "grade" in student:
    print("Ключ 'grade' найден в словаре")
else:
    print("Ключ 'grade' не найден в словаре")
#2 вариант
student = {"name":"Ivan","age":20,"grade":"A"}
key="'test'"
if key in student:
    print("Ключ 'grade' найден в словаре")
else:
    print(f"Ключ {key} не найден в словаре")
# # У словарей значение может быть практически любым типом данных,
# # включая другие словари (объекты), списки (массивы), и переменные:
#
# # Словари внутри словаря
# person = {
#     "имя": "Алиса",
#     "возраст": 30,
#     "адрес": {
#         "город": "Москва",
#         "улица": "Тверская"
#     }
# }
#
# # Доступ к данным во вложенном словаре
# print(person["адрес"]["город"])
#
# # Списки внутри словаря
# person = {
#     "имя": "Алиса",
#     "возраст": 30,
#     "хобби": ["путешествия", "фотография", "чтение"]
# }
#
# # Доступ к элементу списка внутри словаря
# print(person["хобби"][1])  # Выведет: фотография
#
# # Переменные как значения в словаре
# name = "Алиса"
# age = 30
#
# person = {
#     "имя": name,
#     "возраст": age
# }
#
# print(person["имя"])  # Выведет: Алиса
# print(person["возраст"])  # Выведет: 30

# # Изменение города в адресе:
# person["адрес"]["город"] = "Санкт-Петербург"
# print(person["адрес"]["город"])  # Выведет: Санкт-Петербург
python_Copy_Edit_student={"name": "Ivan", "adress": {"city": "Moscow", "street": "Lenina"}}
print(python_Copy_Edit_student)
python_Copy_Edit_student["adress"]["city"] = "Saint Petersburg"
print(python_Copy_Edit_student)

# # Добавление и изменение элементов
# # Добавление нового хобби в список "хобби":
# person["хобби"].append("рисование")
# print(person["хобби"])  # Выведет: ['путешествия', 'фотография', 'чтение', 'рисование']
python_Copy_Edit_student={"name":"Marina","grades":[75,82,90]}
python_Copy_Edit_student["grades"][0]=85
print(python_Copy_Edit_student)

python_Copy_Edit_student=[{"name":"Ivan", "age":20}, {"name":"Pety", "age":22}]
python_Copy_Edit_student[1]["age"]=23
print(python_Copy_Edit_student)


# # Удаление элементов
# # Удаление элемента из списка "хобби":
# person["хобби"].remove("чтение")
# print(person["хобби"])  # Выведет: ['путешествия', 'фотография', 'рисование']

# # Удаление пары "ключ-значение" из словаря:
# del person["возраст"]
# print(person)  # Выведет словарь без пары "возраст"
#
# # -----------------------------
# # Кортежи
# # -----------------------------
# # Кортеж — это неизменяемая упорядоченная коллекция элементов.
# # Похож на список, но не позволяет изменять элементы после создания.
#
# # Создание кортежа:
# coordinates = (10, 20, 30)

# # Работа с кортежами:
# # Доступ к элементу по индексу:
# print(coordinates[1])  # Выведет: 20


# # Кортежи не поддерживают изменение элементов,
# # попытка это сделать вызовет ошибку.
# # coordinates[0] = 100  # Раскомментируй — будет ошибка!
#
# # -----------------------------
# # Множества (set)
# # -----------------------------
#
# # Множества — неупорядоченные коллекции уникальных элементов
# fruits_set = {"яблоко", "банан", "вишня"}
# print(fruits_set)
#
# # Удаляются дубликаты автоматически
# nums = {1, 2, 2, api_testing_items_crud, 4, 5}
# print(nums)  # {1, 2, api_testing_items_crud, 4, 5}
#
# # Добавление элемента
# fruits_set.add("апельсин")
#
# # Удаление элемента
# fruits_set.remove("банан")
#
# # Проверка наличия
# print("вишня" in fruits_set)
colors=("red", "green", "blue")
chek="green" in colors
longz=len(colors)
print(f"Наличие 'green': {chek}. Длина кортежа: {longz}")

# # Объединение множеств
# a = {1, 2, api_testing_items_crud}
# b = {api_testing_items_crud, 4, 5}
# print(a.union(b))  # {1, 2, api_testing_items_crud, 4, 5}
#
# # Пересечение
# print(a.intersection(b))  # {api_testing_items_crud}
#
# # Разность
# print(a.difference(b))  # {1, 2}

# -----------------------------
# Сравнение коллекций
# -----------------------------

# | Коллекция   | Упорядоченность | Изменяемость | Уникальность |
# |-------------|------------------|---------------|----------------|
# | list        | ✅ Да            | ✅ Да         | ❌ Нет         |
# | tuple       | ✅ Да            | ❌ Нет        | ❌ Нет         |
# | dict        | ✅ Да (api_testing_items_crud.7+)     | ✅ Да         | ✅ Ключи       |
# | set         | ❌ Нет           | ✅ Да         | ✅ Да          |


name = input("Введите ваше имя")
print(f"Привет, {name}! Добро пожаловать в мир Python для тестировщиков.")

a, b = input("Введите ваше имя и профессию. через пробел: ").split()
print("Привет", a, "ты у нас получается", b)
vopros= input("Что такое переменная?")
if "переменная" in vopros:
    print(f"ты молодец {a}, все верно")
elif "не помню" in vopros:
    print("Иди учись", a)
else:
    print("Плохо")

name=str(input("Имя пользователя"))
prof=input("Профессия")
tool=input("Любимый инструмент")
if not tool:
    print("Инструмент не указан. Попробуйте снова!")
else:
    print(f"Ваш любимый инструмент: {tool}. Отличный инструмент!")

d_tc=int(input("Кол-во ТС, выполненное за каждый день недели:"))

w_total=d_tc*7
print(f"Общее количество ТС {w_total}в неделю")
print(f"Среднее количество ТС в день",d_tc)
day=int(d_tc)
if day > 10:
    print("Отличная работа")
else:
    print("Попробуй улучшить результат")


bug_report:list[str]=["Ошибка 1 — High", "Ошибка 2 — Low", "Ошибка api_testing_items_crud — High", "Ошибка 4 — Middle", "Ошибка 5 — High"]
bug_report.append("Ошибка 6 - Low")
bug_report.remove("Ошибка api_testing_items_crud — High")
sortirovka=sorted(bug_report)
print(sortirovka)


# Задание: 8
# Напишите программу, которая:
# Запрашивает у пользователя количество тест-кейсов, которые он выполнил за день.
# Проверяет, что введенное значение – это положительное целое число.
# Если ввод некорректный (отрицательное число, строка, пустой ввод), программа просит ввести данные снова.
# После корректного ввода программа выводит сообщение:
# "Отличная работа!", если число тест-кейсов больше 10.
# "Попробуйте улучшить результат.", если меньше или равно 10.

while True:  # Бесконечный цикл — будет повторяться, пока пользователь не введёт корректное значение

    user_input = input("Введите количество тест-кейсов: ") # Получаем ввод от пользователя — input() всегда возвращает строку

    if user_input.isdigit(): # Проверяем: состоит ли введённая строка только из цифр (то есть положительное целое число)

        test_cases = int(user_input) # Преобразуем строку в целое число

        if test_cases > 0: # Дополнительно проверяем, что число больше нуля (0 — это тоже недопустимо по условию)

            break # Прерываем цикл — данные введены корректно

        else: # Если число 0 или отрицательное

            print("Некорректный ввод. Введите положительное число.")  # Сообщаем пользователю об ошибке

    else:  # Если введено не число: буквы, символы, пустая строка и т.п.

        print("Некорректный ввод. Введите положительное число.") # Сообщаем об ошибке и цикл повторяется


#
# 9. Фильтрация баг-репортов
# Цель:
# Научиться работать со списками и фильтровать данные по условиям.
# Задание:
# Напишите программу, которая:
# Создает список из 7 баг-репортов (пример: "Ошибка 1 – High", "Ошибка 2 – Medium").
# Запрашивает у пользователя приоритет (High, Medium или Low).
# Выводит только баги с указанным приоритетом.
# Если таких багов нет, программа сообщает об этом.
# Пример работы:
# Plain Text
# Copy
# Введите приоритет для поиска (High, Medium, Low): High
# Найденные баги:
# - Ошибка 1 – High
# - Ошибка 5 – High
#

bugs = [  # Список багов с приоритетами
    "Ошибка 1 – High",
    "Ошибка 2 – Medium",
    "Ошибка api_testing_items_crud – Low",
    "Ошибка 4 – Medium",
    "Ошибка 5 – High",
    "Ошибка 6 – Low",
    "Ошибка 7 – Medium"
]

priority = input("Введите приоритет для поиска (High, Medium, Low): ").capitalize()  # Запрашиваем приоритет и делаем первую букву заглавной

found_bugs = [bug for bug in bugs if priority in bug]  # Создаём список багов, где встречается нужный приоритет

if found_bugs:  # Если список не пустой (найдены совпадения)
    print("Найденные баги:")
    for bug in found_bugs:  # Перебираем найденные баги
        print("-", bug)  # Выводим каждый баг с дефисом
else:
    print("Баги с приоритетом", priority, "не найдены.")  # Если ничего не найдено — сообщаем об этом



# 12. Работа со словарями: статистика тестов
# Цель:
# Закрепить навыки работы со словари (dict) и обработкой данных.
# Задание:
# Создайте словарь, где ключ – это имя тестировщика, а значение – количество найденных багов.
# Запросите у пользователя имя тестировщика.
# Если тестировщик есть в списке, увеличьте его счетчик на 1.
# Если тестировщика нет – добавьте его в словарь с одним найденным багом.
# Выведите обновленный словарь.


# Исходный словарь: тестировщик — количество найденных багов
testers = {
    "Анна": 3,
    "Иван": 5,
    "Дмитрий": 7
}

# Запрашиваем имя тестировщика
name = input("Введите имя тестировщика: ")

# Проверяем, есть ли имя в словаре
if name in testers:
    testers[name] += 1  # Если есть — увеличиваем значение на 1
else:
    testers[name] = 1   # Если нет — добавляем с 1 багом

# Выводим обновлённый словарь
print("Обновленные данные:", testers)



# 13. Работа со строками: обработка логов
# Цель:
# Закрепить работу со строками, методами split(), strip() и replace().
# Задание:
# Запросите у пользователя строку с ошибкой из лога ("Ошибка: тест не пройден из-за ошибки в модуле auth")
# Преобразуйте ее, удалив лишние пробелы и заменив "Ошибка" на "Ошибка критическая"
# Разбейте строку на слова и выведите список.


# Запрашиваем строку у пользователя
log = input("Введите строку лога: ")

# Удаляем лишние пробелы по краям
log = log.strip()

# Заменяем слово "Ошибка" на "Ошибка критическая"
log = log.replace("Ошибка", "Ошибка критическая", 1)  # только первое вхождение

# Выводим обновлённую строку
print("Обработанная строка:", log)

# Разбиваем строку на отдельные слова
words = log.split()

# Выводим список слов
print("Разбитый текст:", words)

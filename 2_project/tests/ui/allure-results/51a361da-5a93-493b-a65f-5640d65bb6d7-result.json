{"name": "test_login_invalid_credentials", "status": "broken", "statusDetails": {"message": "playwright._impl._errors.Error: value must be a string or regular expression", "trace": "page = <Page url='https://app.clickup.com/login'>\n\n    @allure.feature(\"UI: Авторизация ClickUp, негативный сценарий\")\n    @allure.description(\"Проверяем, что пользователь не может войти с неправильным логином или паролем\")\n    def test_login_invalid_credentials(page):\n        login_page=LoginPage(page)\n    \n        # Используем невалидные данные\n        invalid_email = \"wrong@example.com\"\n        invalid_password = \"wrongpassword123\"\n    \n        login_page.login_with(invalid_email, invalid_password)\n    \n        with allure.step(\"Проверяем, что URL не изменился  /login\"):\n>           expect(page).to_have_url(lambda url: \"/login\" in url)\n\ntest_login_page.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nitems = [<function test_login_invalid_credentials.<locals>.<lambda> at 0x000001C664759990>]\nmatch_substring = False, normalize_white_space = False, ignoreCase = None\n\n    def to_expected_text_values(\n        items: Union[\n            Sequence[Pattern[str]], Sequence[str], Sequence[Union[str, Pattern[str]]]\n        ],\n        match_substring: bool = False,\n        normalize_white_space: bool = False,\n        ignoreCase: Optional[bool] = None,\n    ) -> Sequence[ExpectedTextValue]:\n        out: List[ExpectedTextValue] = []\n        assert isinstance(items, (list, tuple))\n        for item in items:\n            if isinstance(item, str):\n                o = ExpectedTextValue(\n                    string=item,\n                    matchSubstring=match_substring,\n                    normalizeWhiteSpace=normalize_white_space,\n                    ignoreCase=ignoreCase,\n                )\n                if o[\"ignoreCase\"] is None:\n                    del o[\"ignoreCase\"]\n                out.append(o)\n            elif isinstance(item, Pattern):\n                out.append(\n                    expected_regex(item, match_substring, normalize_white_space, ignoreCase)\n                )\n            else:\n>               raise Error(\"value must be a string or regular expression\")\nE               playwright._impl._errors.Error: value must be a string or regular expression\n\n..\\..\\venv\\lib\\site-packages\\playwright\\_impl\\_assertions.py:973: Error"}, "description": "Проверяем, что пользователь не может войти с неправильным логином или паролем", "steps": [{"name": "Логинимся с email='wrong@example.com'", "status": "passed", "steps": [{"name": "Переход по адресу BASE_URL + endpoint", "status": "passed", "steps": [{"name": "Формируем полный URL из BASE и endpoint", "status": "passed", "start": 1749830601526, "stop": 1749830601526}], "start": 1749830601526, "stop": 1749830614672}, {"name": "Ждем селектор и печатаем значением", "status": "passed", "parameters": [{"name": "selector", "value": "'#login-email-input'"}, {"name": "text", "value": "'wrong@example.com'"}, {"name": "delay", "value": "100"}], "start": 1749830614672, "stop": 1749830616683}, {"name": "Ждем селектор и печатаем значением", "status": "passed", "parameters": [{"name": "selector", "value": "'#login-password-input'"}, {"name": "text", "value": "'wrongpassword123'"}, {"name": "delay", "value": "100"}], "start": 1749830616684, "stop": 1749830618569}, {"name": "Ждем селектор и кликаем", "status": "passed", "parameters": [{"name": "selector", "value": "'button[type='submit']:has-text('Log in')'"}], "start": 1749830618569, "stop": 1749830623974}], "parameters": [{"name": "email", "value": "'wrong@example.com'"}, {"name": "password", "value": "'wrongpassword123'"}], "start": 1749830601526, "stop": 1749830623974}, {"name": "Проверяем, что URL не изменился  /login", "status": "broken", "statusDetails": {"message": "playwright._impl._errors.Error: value must be a string or regular expression\n", "trace": "  File \"C:\\Users\\A\\PycharmProjects\\Project_Сlickup_tests\\clickup_tests\\tests\\ui\\test_login_page.py\", line 30, in test_login_invalid_credentials\n    expect(page).to_have_url(lambda url: \"/login\" in url)\n  File \"C:\\Users\\A\\PycharmProjects\\Project_Сlickup_tests\\clickup_tests\\venv\\lib\\site-packages\\playwright\\sync_api\\_generated.py\", line 19027, in to_have_url\n    self._sync(\n  File \"C:\\Users\\A\\PycharmProjects\\Project_Сlickup_tests\\clickup_tests\\venv\\lib\\site-packages\\playwright\\_impl\\_sync_base.py\", line 115, in _sync\n    return task.result()\n  File \"C:\\Users\\A\\PycharmProjects\\Project_Сlickup_tests\\clickup_tests\\venv\\lib\\site-packages\\playwright\\_impl\\_assertions.py\", line 126, in to_have_url\n    expected_text = to_expected_text_values([urlOrRegExp], ignoreCase=ignoreCase)\n  File \"C:\\Users\\A\\PycharmProjects\\Project_Сlickup_tests\\clickup_tests\\venv\\lib\\site-packages\\playwright\\_impl\\_assertions.py\", line 973, in to_expected_text_values\n    raise Error(\"value must be a string or regular expression\")\n"}, "start": 1749830623974, "stop": 1749830623989}], "start": 1749830601525, "stop": 1749830623990, "uuid": "6c5bfde8-d16c-4d53-8b13-b7542b201eaa", "historyId": "071f92c4f67a6f129ce94efc090a7ec0", "testCaseId": "071f92c4f67a6f129ce94efc090a7ec0", "fullName": "tests.ui.test_login_page#test_login_invalid_credentials", "labels": [{"name": "feature", "value": "UI: Авторизация ClickUp, негативный сценарий"}, {"name": "parentSuite", "value": "tests.ui"}, {"name": "suite", "value": "test_login_page"}, {"name": "host", "value": "A1"}, {"name": "thread", "value": "25736-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.ui.test_login_page"}]}